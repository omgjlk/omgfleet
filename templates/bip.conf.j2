# bip default config file.
# Thou shoult change thy password

# Listening IP address. This is the IP address bip will listen for incoming
# client connections.
ip = "0.0.0.0";

# To connect a client to bip, try the port below, and
# be sure to set the password to the value
# specified in the network you want to connect to.
# Port is 6667 by default.
port = 39393;

# If you set this to true, you'll only be able to connect to bip
# with a SSL capable IRC client. Be sure to generate a certificate
# for bip using scripts/bipgenconfig.
client_side_ssl = true;

# This is the file containing the SSL cert/key pair bip'll use to
# serve SSL clients. If unset, it defaults to <biphome>/bip.pem
client_side_ssl_pem = "/etc/bip/bip.pem";

# Define where the pidfile should be stored. Defaults to <biphome>/bip.pid
pid_file="/var/lib/bip/bip.pid";

# Uncomment this line to disable logging and backlogging.
#log = false

# Define bip's log level :
# 0 : only fatal errors
# 1 : add others errors
# 2 : add warnings
# 3 : add info messages
# 4 : add debug messages
log_level = 3;

# This is where logs go. Channel and private messages will use that
# configuration value as a prefix, and then log_format to determine
# full log filename.
log_root = "/var/log/bip";

# Uncomment this line to disable bip's internal messages logging.
# This is not recommended, a better option is to reduce log_level.
#log_system = false;

# Log format allows you to make log filenames depend on the log line's
# attributes. Here's a list :
# %u -> user name
# %n -> network name
# %Y -> 4 digit year
# %m -> 2 digit month
# %d -> 2 digit day
# %h -> 2 digit hour of the day
# %c -> destination (#chan, nick, ...)
#log_format = "%u/%n/%Y-%m/%c.%d.log";

# Sets the frequency (in seconds) of log syncing (real write to kernel)
#log_sync_interval = 5;

# Network definition, a name and server info
network {
	name = "underlug";
	ssl = true;
	server { host = "sigsauer.underlug.org"; port = 6697; };
};

network {
	name = "freenode";
	ssl = true;
	server {host = "irc.freenode.net"; port = 6697; };
};
# User structure is grouping information for a given user
user {
	# The name in bip of the user
	# This is used by bip only
	name = "bipme";
	# this user's password (md5(md5("tata"))) with seed - generated by
	# bipmkpw
	password = "{{ bippw }}";

	# Set this to true if you want "bip4ever" to have admin privileges on
	# bip He'll be able to RELOAD bip and see all users' configuration
	# (except pass)
	admin = true;

	# When bip_use_notice is true, bip will send internal messages like
	# disconnection notifications or /BIP commands replies as notices
	# instead of private messages. The default is false.
	#bip_use_notice = true;

	# SSL certificates checking mode for user:
	# - "none" to accept anything;
	# - "basic" to accept if the certificate is contained in the store;
	# In "basic" mode, encountered untrusted certificates can be added to
	# the store interactively by connecting a client and "trusting" them.
	# - "ca" to do a complete certificate chain checking with the objects
	# in the store below (you have to put in it every cert, CRL, up to the
	# root CA). You have to build your store manually, so you may prefer
	# using "basic" unless you're a crypto zealot...
	ssl_check_mode = "none";

	# Location of the user's store for SSL certificate check
	# In "basic" mode, that must point to a single file with all trusted
	# certs concatenated together (the interactive "trust" appends to this
	# file).
	# In "ca" mode, it's a directory of a standard openssl store; you must
	# put PEM objects (certificates, CRLs...) with .pem extension and run
	# `c_rehash .' in it
	#ssl_check_store = "/home/bip4ever/.bip/trustedcerts.txt";

	# Some networks (OFTC at least) allow you to authenticate to nickserv
	# using client side certificates, see
	# http://www.oftc.net/oftc/NickServ/CertFP
	# This is where you put your user's certificate.
	# ssl_client_certfile = "/home/bip4ever/.bip/bip4ever_client_auth.pem";

	# These will be the default for each connections
	default_nick = "jlk";
	default_user = "jkeating";
	default_realname = "Jesse Keating";

	# Makes bip send the log of each channel and privates while
	# you were not connected to the proxy upon connection.
	#backlog = true;		# enable backlog
	backlog_lines = 0;		# number of lines in backlog, 0 means
					# no limit
	backlog_always = true;		# backlog even lines already backlogged
					# = do not reset backlog when no client
					# attached anymore
	#backlog_no_timestamp = false;  # Disables time stamps if you find them
					# ugly.

	# If blreset_on_talk talking on an irc network has the same effect of
	# issuing /bip blreset <current window>, meaning that stuffed logged
	# before the command won't be read back on backlog
	backlog_reset_on_talk = true;
	#
	# If you have backlog_reset_on_talk set to true, talking in a query
	# will reset the backlog for the query. Same goes for channel. With the
	# following option set to true, talking in a connection will reset the
	# whole connection. The backlog for the current network is reset.
	backlog_reset_connection = true;

	# If bl_msg_only is true, only channel and private messages will be
	# backlogged upon the reconnection of a client. Default is false, thus
	# joins, parts, quits, nick changes, topic changes, ... are backlogged
	backlog_msg_only = true;


	# A user can have mutiple connections to irc networks.
	# define a connection:
	connection {
		name = "underlug";		# used by bip only
		network = "underlug";	# which ircnet to connect to

		no_client_away_msg = "Having life, knock again later";
		# Autojoined channels:
		# Password protected channel
		channel {
			name = "#underlug";
			key = "{{ ulug_chan_pass }}";
		};
		channel { name = "#git"; };
		channel { name = "#spoilers"; };
	};

	connection {
		name = "freenode";		# used by bip only
		network = "freenode";	# which ircnet to connect to

		on_connect_send = "PRIVMSG NickServ :IDENTIFY {{ freenode_nicpw }}";

		# Autojoined channels:
		channel { name = "#ansible"; };
		channel { name = "#ansible-awx"; };
		channel { name = "#ansible-community"; };
		channel { name = "#ansible-devel"; };
		channel { name = "#{{ freenode_fba }}"; };
		channel { name = "#github"; };
		channel { name = "#github3.py"; };
		channel { name = "#seagl"; };
		channel { name = "#zuul"; };
	};
};